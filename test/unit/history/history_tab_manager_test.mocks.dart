// Mocks generated by Mockito 5.4.4 from annotations
// in physical_note/test/history/history_tab_manager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i4;

import 'package:flutter/src/material/tab_controller.dart' as _i2;
import 'package:flutter/widgets.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDuration_0 extends _i1.SmartFake implements Duration {
  _FakeDuration_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TabController].
///
/// See the documentation for Mockito's code generation for more information.
class MockTabController extends _i1.Mock implements _i2.TabController {
  MockTabController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: 0,
      ) as int);

  @override
  Duration get animationDuration => (super.noSuchMethod(
        Invocation.getter(#animationDuration),
        returnValue: _FakeDuration_0(
          this,
          Invocation.getter(#animationDuration),
        ),
      ) as Duration);

  @override
  int get index => (super.noSuchMethod(
        Invocation.getter(#index),
        returnValue: 0,
      ) as int);

  @override
  set index(int? value) => super.noSuchMethod(
        Invocation.setter(
          #index,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get previousIndex => (super.noSuchMethod(
        Invocation.getter(#previousIndex),
        returnValue: 0,
      ) as int);

  @override
  bool get indexIsChanging => (super.noSuchMethod(
        Invocation.getter(#indexIsChanging),
        returnValue: false,
      ) as bool);

  @override
  double get offset => (super.noSuchMethod(
        Invocation.getter(#offset),
        returnValue: 0.0,
      ) as double);

  @override
  set offset(double? value) => super.noSuchMethod(
        Invocation.setter(
          #offset,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void animateTo(
    int? value, {
    Duration? duration,
    _i3.Curve? curve = _i3.Curves.ease,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #animateTo,
          [value],
          {
            #duration: duration,
            #curve: curve,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
